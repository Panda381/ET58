; ML-20 Day of week, days between dates
;  (MMDD.YYYY)                  AbsDay
; DATE1  DATE2 NoDAYS DayOfWeek Julian

; LBL A: Enter date 1 (in format MMDD.YYYY)
; LBL B: Enter date 2 (in format MMDD.YYYY)
; LBL C: get number of days between date 1 and date 2
; LBL D: get day of week (input date in format MMDD.YYYY), output day:
;		0=Saturday
;		1=Sunday
;		2=Monday
;		3=Tuesday
;		4=Wednesday
;		5=Thursday
;		6=Friday
; LBL E: convert date (in format MMDD.YYYY) to Julian day (0101.1583 is Julian day 2299238).
; LBL E': convert date (in format MMDD.YYYY) to absolute day (0101.1583 is absolute day 578179).

; Registers:
;  H1 ... temporary: entered date MMDD.YYYY, MMDD, MM
;  H2 ... temporary: day DD
;  H3 ... temporary: year YYYY
;  H4 ... date 1 (in absolute day)
;  H5 ... date 2 (in absolute day)

; correction for month 3 and more
LBL STA
	( . 4
	* HIR 11 	; RCL H1, 0.4 * month MM + 2.3
	+ 2 . 3 ) 
	INT +/- + 	; integer
	GTO GE

; error indicator
LBL AVR
	0 1/X
	RTN

; LBL E: convert date (in format MMDD.YYYY) to Julian day (0101.1583 is Julian day 2299238).
LBL E
	E'		; calculate absolute day
	( CE + 1 7 2 1 0 5 9 ) ; offset of Julian day
	RTN
	
; LBL E': convert date (in format MMDD.YYYY) to absolute day (0101.1583 is absolute day 578179).
LBL E'
	; date must be > 0
	( HIR 01 	; STO H1, save converted date
	CP 		; clear T register
	INV GE AVR 	; if x < 0 then error

	; get year YYYY
	INV INT 	; get year 0.YYYY
	HIR 51		; INV SUM H1, subtract year from H1 (H1 will contain MMDD)
	* 4 INV LOG  	; * 10000 = year YYYY
	) ROU HIR 03	; STO H3, year YYYY

	; check minimal year 1583
	X/T 		; save year into T
	1 5 8 2 	; minimal year 1583 - 1
	GE AVR 		; if year <= 1582 then error

	; split MMDD to month MM and day DD
	3 2		; 32, max. day + 1
	X/T 		; X <- year YYYY
	( ( HIR 11 	; RCL H1, month and day MMDD
	/ 1 0 0 ) 	; / 100 -> MM.DD
	HIR 01 		; STO H1, save MM.DD
	INV INT 	; get day 0.DD
	HIR 51		; INV SUM H1, subtract day, H1 will contain month MM
	* 1 0 0 ) 	; * 100 = day DD
	HIR 02 		; STO H2, save day DD
	GE AVR 		; if day DD >= 32 then error

	; check max. month
	1 3 		; 13, max. month + 1
	X/T 		; T <- 13, max. month + 1
	HIR 11 		; RCL H1, get month MM
	GE AVR 		; if month MM >= 13 then error

	; recalc date to days
	( 3 6 5 	; 365, number of days per year
	* HIR 13	; RCL H3, * year YYYY
	+ HIR 12	; RCL H2, + day DD
	+ 3 1 		; default 31 days per month
	* HIR 11	; RCL H1, + 31*month MM
	- 3 1 		; - 31

	; correction for month 1 and 2
	+ 3 
	X/T
	HIR 11		; RCL H1, + month MM
	GE STA 		; if month MM >= 3 then skip
	1 HIR 53	; INV SUM H3, decrease year if month = 1 or 2

LBL GE
	( HIR 13 / 4 ) 	; RCL H3, add INT(month / 4)
	INT - 		; integer
	( . 7 5 + 
	( HIR 13	; RCL H3, month / 100 + 0.75
	/ 1 0 0 ) 
	INT * 		; integer
	. 7 5 )		; * 0.75
	INT 
	) 
	ROU 		; round result
	RTN

; LBL A: Enter date 1 (in format MMDD.YYYY)
LBL A 
	E' 		; convert date to absolute day
	HIR 04		; STO H4, save date 1 (in absolute day)
	0 
	RTN

; LBL B: Enter date 2 (in format MMDD.YYYY)
LBL B 
	E' 		; convert date to absolute day
	HIR 05		; STO H5, save date 2 (in absolute day)
	0 
	RTN

; LBL C: get number of days between date 1 and date 2
LBL C 
	( HIR 15	; RCL H5, date 2 (in absolute day)
	- HIR 14 ) 	; RCL H4, date 1 (in absolute day)
	RTN

; LBL D: get day of week (input date in format MMDD.YYYY, output day 0=Sunday, ... 6=Saturday)
LBL D 
	( ( 
	E'  		; convert date to absolute day
	HIR 01		; STO H1, absolute day
	+/- 
	/ 7 ) 		; day / 7
	INT 
	* 7 
	+ HIR 11 ) 	; RCL H1
	ROU 		; round result to integer value
	RTN
